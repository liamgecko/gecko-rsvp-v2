//
// Check/radio
//

.form-check {
  display: block;
  min-height: $form-check-min-height;
  padding-left: $form-check-padding-start;
  margin-bottom: $form-check-margin-bottom;

  .form-check-input {
    float: left;
    margin-left: $form-check-padding-start * -1;
  }
}

.form-check-reverse {
  padding-right: $form-check-padding-start;
  padding-left: 0;
  text-align: right;

  .form-check-input {
    float: right;
    margin-right: $form-check-padding-start * -1;
    margin-left: 0;
  }
}

.form-check-input {
  width: $form-check-input-width;
  height: $form-check-input-width;
  margin-top: ($line-height-base - $form-check-input-width) * .5; // line-height minus check height
  vertical-align: top;
  background-color: $form-check-input-bg;
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  border: $form-check-input-border;
  appearance: none;
  cursor: pointer;
  print-color-adjust: exact; // Keep themed appearance for print
  @include transition($form-check-transition);
  @include transition();

  &[type="checkbox"] {
    @include border-radius($form-check-input-border-radius);
  }

  &[type="radio"] {
    // stylelint-disable-next-line property-disallowed-list
    border-radius: $form-check-radio-border-radius;
  }

  &:hover {
    border-color: $form-check-input-hover-border;
  }

  &:active {
    filter: $form-check-input-active-filter;
  }

  &:focus {
    border-color: $form-check-input-focus-border;
    outline: 0;
    box-shadow: $form-check-input-focus-box-shadow; 
  }

  &:checked {
    background-color: $form-check-input-checked-bg-color;
    border-color: $form-check-input-checked-border-color;

    &[type="checkbox"] {
      @if $enable-gradients {
        background-image: escape-svg($form-check-input-checked-bg-image), var(--#{$prefix}gradient);
      } @else {
        background-image: escape-svg($form-check-input-checked-bg-image);
      }
    }

    &[type="radio"] {
      @if $enable-gradients {
        background-image: escape-svg($form-check-radio-checked-bg-image), var(--#{$prefix}gradient);
      } @else {
        background-image: escape-svg($form-check-radio-checked-bg-image);
      }
    }

    &:hover {
      background-color: $form-check-input-checked-bg-hover-color;
    }
  }

  &[type="checkbox"]:indeterminate {
    background-color: $form-check-input-indeterminate-bg-color;
    border-color: $form-check-input-indeterminate-border-color;

    @if $enable-gradients {
      background-image: escape-svg($form-check-input-indeterminate-bg-image), var(--#{$prefix}gradient);
    } @else {
      background-image: escape-svg($form-check-input-indeterminate-bg-image);
    }
  }

  &:disabled {
    pointer-events: none;
    filter: none;
    background-color: $form-check-input-disabled-bg;
    &:hover {
      border-color: $form-check-input-disabled-hover-border;
    }
    &:checked[type=radio],
    &:checked[type=checkbox] {
      background-color: $form-check-input-disabled-checked-bg;
      border-color: $form-check-input-disabled-checked-border;
    }
  }

  // Use disabled attribute in addition of :disabled pseudo-class
  // See: https://github.com/twbs/bootstrap/issues/28247
  &[disabled],
  &:disabled {
    ~ .form-check-label {
      cursor: not-allowed;
    }
  }
}

.form-check-label {
  color: $form-check-label-color;
  cursor: $form-check-label-cursor;
}

//
// Switch
//

.form-switch {
  padding-left: $form-switch-padding-start;
  display: inline-flex;
  align-items: center;

  label {
    margin-left: $form-switch-label-margin;
    font-weight: $form-label-font-weight;
    font-size: $form-label-font-size;
  }

  .form-check-input {
    width: $form-switch-width; 
    height: $form-switch-height;
    margin-left: $form-switch-padding-start * -1;
    margin-top: 0;
    background-image: escape-svg($form-switch-bg-image);
    background-color: $form-switch-bg-color;
    background-position: left center;
    border: none;
    @include border-radius($form-switch-border-radius);
    transition: background-position 0.15s ease-in-out, background-color 0.3s ease;
    cursor: pointer;

    &:hover {
      background-image: escape-svg($form-switch-hover-bg-image);
      background-color: $form-switch-hover-bg-color;
    }

    &:focus {
      background-image: escape-svg($form-switch-focus-bg-image);
      box-shadow: $form-switch-focus-box-shadow;
    }

    &:active {
      filter: brightness(100%); 
    }

    &:checked {
      background-position: $form-switch-checked-bg-position;

      @if $enable-gradients {
        background-image: escape-svg($form-switch-checked-bg-image), var(--#{$prefix}gradient);
        background-color: $form-switch-checked-bg-color;
      } @else {
        background-image: escape-svg($form-switch-checked-bg-image);
        background-color: $form-switch-checked-bg-color;
      }
      &:hover {
        background-color: $form-switch-checked-hover-bg-color;
      }
    }

    &:disabled {
      background-image: escape-svg($form-switch-disabled-bg-image);
      background-color: $form-switch-disabled-bg-color;
      cursor: not-allowed;
      &:checked[type=checkbox] {
        background-image: escape-svg($form-switch-checked-disabled-bg-image);
        background-color: $form-switch-checked-disabled-bg-color;
        opacity: $form-switch-checked-disabled-opacity;
        cursor: not-allowed;
      } 
    }
  
  }

  &.form-check-reverse {
    padding-right: $form-switch-padding-start;
    padding-left: 0;
    flex-direction: row-reverse;

    label {
      margin-right: $form-switch-label-margin;
      margin-left: 0;
    }

    .form-check-input {
      margin-right: $form-switch-padding-start * -1;
      margin-left: 0;
    }
  }
}

.form-check-inline {
  display: inline-block;
  margin-right: $form-check-inline-margin-end;
}

.btn-check {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  pointer-events: none;

  &[disabled],
  &:disabled {
    + .btn {
      pointer-events: none;
      filter: none;
      opacity: $form-check-btn-check-disabled-opacity; 
    }
  }
}
